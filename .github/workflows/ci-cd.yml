name: Perfume Shop CI/CD

on:
  push:
    branches:
      - main
      - 'feature/*'

jobs:
  # 1️⃣ Build and test Node.js app
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npx jest

  # 2️⃣ Build Docker image and push to Docker Hub
  docker-build-and-push:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        run: |
          docker build -t mabaddi96/perfume-shop:${{ github.sha }} .
          docker tag mabaddi96/perfume-shop:${{ github.sha }} mabaddi96/perfume-shop:latest
          docker push mabaddi96/perfume-shop:${{ github.sha }}
          docker push mabaddi96/perfume-shop:latest

  # 3️⃣ Deploy to OpenShift (create deployment & route if missing)
  deploy-to-openshift:
    runs-on: ubuntu-latest
    needs: docker-build-and-push
    steps:
      - name: Install OpenShift CLI
        run: |
          curl -LO https://mirror.openshift.com/pub/openshift-v4/clients/oc/latest/linux/oc.tar.gz
          tar -xzf oc.tar.gz
          sudo mv oc /usr/local/bin/
          oc version

      - name: Log in to OpenShift
        uses: redhat-actions/oc-login@v1
        with:
          openshift_server_url: ${{ secrets.OPENSHIFT_SERVER }}
          openshift_token: ${{ secrets.OPENSHIFT_TOKEN }}
          insecure_skip_tls_verify: true
          namespace: muhammadsaleh96-dev

      - name: Ensure deployment exists
        run: |
          if ! oc get deployment perfume-shop -n muhammadsaleh96-dev; then
            echo "Deployment not found. Creating..."
            oc create deployment perfume-shop --image=${{ secrets.DOCKER_USERNAME }}/perfume-shop:latest -n muhammadsaleh96-dev
          else
            echo "Deployment already exists."
          fi

      - name: Ensure route exists
        run: |
          if ! oc get route perfume-shop -n muhammadsaleh96-dev; then
            echo "Route not found. Creating..."
            oc expose deployment perfume-shop --port=8080 --name=perfume-shop -n muhammadsaleh96-dev
          else
            echo "Route already exists."
          fi

      - name: Update deployment image and scale
        run: |
          oc set image deployment/perfume-shop \
          perfume-shop=mabaddi96/perfume-shop:latest
          oc scale deployment perfume-shop --replicas=1 -n muhammadsaleh96-dev

      - name: Wait for rollout, pod readiness, and endpoint
        run: |
          MAX_WAIT=300      # Maximum seconds to wait (5 minutes)
          INTERVAL=5        # Check every 5 seconds
          ELAPSED=0

          echo "Waiting for deployment rollout..."
          if ! oc rollout status deployment/perfume-shop --timeout=5m; then
            echo "Rollout failed! Rolling back..."
            oc rollout undo deployment/perfume-shop
            oc rollout status deployment/perfume-shop
            exit 1
          fi

          echo "Waiting for at least one ready pod..."
          until oc get pods -n muhammadsaleh96-dev -l deployment=perfume-shop -o jsonpath='{range .items[*]}{.status.containerStatuses[0].ready}{"\n"}{end}' | grep -q true; do
            if [ $ELAPSED -ge $MAX_WAIT ]; then
              echo "Timed out waiting for pod readiness!"
              exit 1
            fi
            echo "Pod not ready yet. Waiting..."
            sleep $INTERVAL
            ELAPSED=$((ELAPSED+INTERVAL))
          done

          echo "Pod is ready. Checking endpoint..."
          ROUTE_URL=$(oc get route perfume-shop -n muhammadsaleh96-dev -o jsonpath='{.spec.host}')
          ELAPSED=0
          until curl --silent --head --fail "http://$ROUTE_URL" > /dev/null 2>&1; do
            if [ $ELAPSED -ge $MAX_WAIT ]; then
              echo "Timed out waiting for endpoint availability!"
              exit 1
            fi
            echo "Endpoint not ready yet. Waiting..."
            sleep $INTERVAL
            ELAPSED=$((ELAPSED+INTERVAL))
          done

          echo "Deployment successful, pod is ready, and endpoint is serving traffic!"
